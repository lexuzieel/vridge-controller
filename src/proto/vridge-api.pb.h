/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.0-dev */

#ifndef PB_PROTO_VRIDGE_API_PB_H_INCLUDED
#define PB_PROTO_VRIDGE_API_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _BeaconOrigin {
    BeaconOrigin_Server = 0,
    BeaconOrigin_Client = 1
} BeaconOrigin;
#define _BeaconOrigin_MIN BeaconOrigin_Server
#define _BeaconOrigin_MAX BeaconOrigin_Client
#define _BeaconOrigin_ARRAYSIZE ((BeaconOrigin)(BeaconOrigin_Client+1))

typedef enum _HandType {
    HandType_Left = 0,
    HandType_Right = 1
} HandType;
#define _HandType_MIN HandType_Left
#define _HandType_MAX HandType_Right
#define _HandType_ARRAYSIZE ((HandType)(HandType_Right+1))

typedef enum _HeadRelation {
    HeadRelation_Unrelated = 0,
    HeadRelation_IsInHeadSpace = 1,
    HeadRelation_SticksToHead = 2
} HeadRelation;
#define _HeadRelation_MIN HeadRelation_Unrelated
#define _HeadRelation_MAX HeadRelation_SticksToHead
#define _HeadRelation_ARRAYSIZE ((HeadRelation)(HeadRelation_SticksToHead+1))

/* Struct definitions */
typedef struct _Beacon {
    bool has_Role;
    BeaconOrigin Role;
    pb_callback_t MachineName;
    pb_callback_t UserName;
    pb_callback_t HumanReadableVersion;
/* @@protoc_insertion_point(struct:Beacon) */
} Beacon;


typedef struct _ControllerStateResponse {
    bool has_Version;
    int32_t Version;
    bool has_ReplyCode;
    uint32_t ReplyCode;
/* @@protoc_insertion_point(struct:ControllerStateResponse) */
} ControllerStateResponse;


typedef struct _HapticPulse {
    bool has_ControllerId;
    int32_t ControllerId;
    bool has_LengthUs;
    uint32_t LengthUs;
    bool has_TimestampUs;
    uint32_t TimestampUs;
/* @@protoc_insertion_point(struct:HapticPulse) */
} HapticPulse;


typedef struct _HeadTrackingRequest {
    bool has_Version;
    int32_t Version;
    bool has_TaskType;
    uint32_t TaskType;
    pb_callback_t Data;
/* @@protoc_insertion_point(struct:HeadTrackingRequest) */
} HeadTrackingRequest;


typedef struct _TrackedPose {
    pb_callback_t HeadOrientation;
    pb_callback_t HeadPosition;
    bool has_RecenterYawOffset;
    float RecenterYawOffset;
    bool has_ApiYawOffset;
    float ApiYawOffset;
/* @@protoc_insertion_point(struct:TrackedPose) */
} TrackedPose;


typedef struct _VRControllerAxis_t {
    bool has_x;
    float x;
    bool has_y;
    float y;
/* @@protoc_insertion_point(struct:VRControllerAxis_t) */
} VRControllerAxis_t;


typedef struct _HeadTrackingResponse {
    bool has_Version;
    int32_t Version;
    bool has_ReplyCode;
    uint32_t ReplyCode;
    pb_callback_t Data;
    bool has_TrackedPose;
    TrackedPose TrackedPose;
/* @@protoc_insertion_point(struct:HeadTrackingResponse) */
} HeadTrackingResponse;


typedef struct _VRControllerState_t {
    bool has_unPacketNum;
    uint32_t unPacketNum;
    bool has_ulButtonPressed;
    uint64_t ulButtonPressed;
    bool has_ulButtonTouched;
    uint64_t ulButtonTouched;
    bool has_rAxis0;
    VRControllerAxis_t rAxis0;
    bool has_rAxis1;
    VRControllerAxis_t rAxis1;
    bool has_rAxis2;
    VRControllerAxis_t rAxis2;
    bool has_rAxis3;
    VRControllerAxis_t rAxis3;
    bool has_rAxis4;
    VRControllerAxis_t rAxis4;
/* @@protoc_insertion_point(struct:VRControllerState_t) */
} VRControllerState_t;


typedef struct _VRController {
    bool has_ControllerId;
    int32_t ControllerId;
    bool has_Status;
    int32_t Status;
    pb_callback_t OrientationMatrix;
    bool has_ButtonState;
    VRControllerState_t ButtonState;
    pb_callback_t Acceleration;
    pb_callback_t Velocity;
    bool has_HeadRelation;
    HeadRelation HeadRelation;
    bool has_SuggestedHand;
    HandType SuggestedHand;
    bool has_Timestamp;
    double Timestamp;
    pb_callback_t Name;
    pb_callback_t Position;
    pb_callback_t Orientation;
/* @@protoc_insertion_point(struct:VRController) */
} VRController;


typedef struct _ControllerStateRequest {
    bool has_Version;
    int32_t Version;
    bool has_TaskType;
    uint32_t TaskType;
    bool has_ControllerState;
    VRController ControllerState;
/* @@protoc_insertion_point(struct:ControllerStateRequest) */
} ControllerStateRequest;


/* Initializer values for message structs */
#define Beacon_init_default {false, BeaconOrigin_Server, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define ControllerStateRequest_init_default {false, 0, false, 0u, false, VRController_init_default}
#define ControllerStateResponse_init_default {false, 0, false, 0u}
#define HapticPulse_init_default {false, 0, false, 0u, false, 0u}
#define HeadTrackingRequest_init_default {false, 0, false, 0u, {{NULL}, NULL}}
#define HeadTrackingResponse_init_default {false, 0, false, 0u, {{NULL}, NULL}, false, TrackedPose_init_default}
#define TrackedPose_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, 0.0f, false, 0.0f}
#define VRController_init_default {false, 0, false, 0, {{NULL}, NULL}, false, VRControllerState_t_init_default, {{NULL}, NULL}, {{NULL}, NULL}, false, HeadRelation_Unrelated, false, HandType_Left, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define VRControllerAxis_t_init_default {false, 0.0f, false, 0.0f}
#define VRControllerState_t_init_default {false, 0u, false, 0ull, false, 0ull, false, VRControllerAxis_t_init_default, false, VRControllerAxis_t_init_default, false, VRControllerAxis_t_init_default, false, VRControllerAxis_t_init_default, false, VRControllerAxis_t_init_default}
#define Beacon_init_zero {false, _BeaconOrigin_MIN, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define ControllerStateRequest_init_zero {false, 0, false, 0, false, VRController_init_zero}
#define ControllerStateResponse_init_zero {false, 0, false, 0}
#define HapticPulse_init_zero {false, 0, false, 0, false, 0}
#define HeadTrackingRequest_init_zero {false, 0, false, 0, {{NULL}, NULL}}
#define HeadTrackingResponse_init_zero {false, 0, false, 0, {{NULL}, NULL}, false, TrackedPose_init_zero}
#define TrackedPose_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0}
#define VRController_init_zero {false, 0, false, 0, {{NULL}, NULL}, false, VRControllerState_t_init_zero, {{NULL}, NULL}, {{NULL}, NULL}, false, _HeadRelation_MIN, false, _HandType_MIN, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define VRControllerAxis_t_init_zero {false, 0, false, 0}
#define VRControllerState_t_init_zero {false, 0, false, 0, false, 0, false, VRControllerAxis_t_init_zero, false, VRControllerAxis_t_init_zero, false, VRControllerAxis_t_init_zero, false, VRControllerAxis_t_init_zero, false, VRControllerAxis_t_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define Beacon_Role_tag 1
#define Beacon_MachineName_tag 2
#define Beacon_UserName_tag 3
#define Beacon_HumanReadableVersion_tag 4
#define ControllerStateResponse_Version_tag 1
#define ControllerStateResponse_ReplyCode_tag 2
#define HapticPulse_ControllerId_tag 1
#define HapticPulse_LengthUs_tag 2
#define HapticPulse_TimestampUs_tag 3
#define HeadTrackingRequest_Version_tag 1
#define HeadTrackingRequest_TaskType_tag 2
#define HeadTrackingRequest_Data_tag 3
#define TrackedPose_HeadOrientation_tag 1
#define TrackedPose_HeadPosition_tag 2
#define TrackedPose_RecenterYawOffset_tag 3
#define TrackedPose_ApiYawOffset_tag 4
#define VRControllerAxis_t_x_tag 1
#define VRControllerAxis_t_y_tag 2
#define HeadTrackingResponse_Version_tag 1
#define HeadTrackingResponse_ReplyCode_tag 2
#define HeadTrackingResponse_Data_tag 3
#define HeadTrackingResponse_TrackedPose_tag 4
#define VRControllerState_t_unPacketNum_tag 1
#define VRControllerState_t_ulButtonPressed_tag 2
#define VRControllerState_t_ulButtonTouched_tag 3
#define VRControllerState_t_rAxis0_tag 4
#define VRControllerState_t_rAxis1_tag 5
#define VRControllerState_t_rAxis2_tag 7
#define VRControllerState_t_rAxis3_tag 8
#define VRControllerState_t_rAxis4_tag 9
#define VRController_ControllerId_tag 1
#define VRController_Status_tag 2
#define VRController_OrientationMatrix_tag 3
#define VRController_ButtonState_tag 4
#define VRController_Acceleration_tag 5
#define VRController_Velocity_tag 6
#define VRController_HeadRelation_tag 7
#define VRController_SuggestedHand_tag 8
#define VRController_Timestamp_tag 9
#define VRController_Name_tag 11
#define VRController_Position_tag 12
#define VRController_Orientation_tag 13
#define ControllerStateRequest_Version_tag 1
#define ControllerStateRequest_TaskType_tag 2
#define ControllerStateRequest_ControllerState_tag 4

/* Struct field encoding specification for nanopb */
#define Beacon_FIELDLIST(X, a) \
X(a, STATIC, OPTIONAL, UENUM, Role, 1) \
X(a, CALLBACK, OPTIONAL, STRING, MachineName, 2) \
X(a, CALLBACK, OPTIONAL, STRING, UserName, 3) \
X(a, CALLBACK, OPTIONAL, STRING, HumanReadableVersion, 4)
#define Beacon_CALLBACK pb_default_field_callback
#define Beacon_DEFAULT (const uint8_t*)"\x08\x00\x00"

#define ControllerStateRequest_FIELDLIST(X, a) \
X(a, STATIC, OPTIONAL, INT32, Version, 1) \
X(a, STATIC, OPTIONAL, UINT32, TaskType, 2) \
X(a, STATIC, OPTIONAL, MESSAGE, ControllerState, 4)
#define ControllerStateRequest_CALLBACK NULL
#define ControllerStateRequest_DEFAULT (const uint8_t*)"\x08\x00\x10\x00\x00"
#define ControllerStateRequest_ControllerState_MSGTYPE VRController

#define ControllerStateResponse_FIELDLIST(X, a) \
X(a, STATIC, OPTIONAL, INT32, Version, 1) \
X(a, STATIC, OPTIONAL, UINT32, ReplyCode, 2)
#define ControllerStateResponse_CALLBACK NULL
#define ControllerStateResponse_DEFAULT (const uint8_t*)"\x08\x00\x10\x00\x00"

#define HapticPulse_FIELDLIST(X, a) \
X(a, STATIC, OPTIONAL, INT32, ControllerId, 1) \
X(a, STATIC, OPTIONAL, UINT32, LengthUs, 2) \
X(a, STATIC, OPTIONAL, UINT32, TimestampUs, 3)
#define HapticPulse_CALLBACK NULL
#define HapticPulse_DEFAULT (const uint8_t*)"\x08\x00\x10\x00\x18\x00\x00"

#define HeadTrackingRequest_FIELDLIST(X, a) \
X(a, STATIC, OPTIONAL, INT32, Version, 1) \
X(a, STATIC, OPTIONAL, UINT32, TaskType, 2) \
X(a, CALLBACK, OPTIONAL, BYTES, Data, 3)
#define HeadTrackingRequest_CALLBACK pb_default_field_callback
#define HeadTrackingRequest_DEFAULT (const uint8_t*)"\x08\x00\x10\x00\x00"

#define HeadTrackingResponse_FIELDLIST(X, a) \
X(a, STATIC, OPTIONAL, INT32, Version, 1) \
X(a, STATIC, OPTIONAL, UINT32, ReplyCode, 2) \
X(a, CALLBACK, REPEATED, FLOAT, Data, 3) \
X(a, STATIC, OPTIONAL, MESSAGE, TrackedPose, 4)
#define HeadTrackingResponse_CALLBACK pb_default_field_callback
#define HeadTrackingResponse_DEFAULT (const uint8_t*)"\x08\x00\x10\x00\x00"
#define HeadTrackingResponse_TrackedPose_MSGTYPE TrackedPose

#define TrackedPose_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, FLOAT, HeadOrientation, 1) \
X(a, CALLBACK, REPEATED, FLOAT, HeadPosition, 2) \
X(a, STATIC, OPTIONAL, FLOAT, RecenterYawOffset, 3) \
X(a, STATIC, OPTIONAL, FLOAT, ApiYawOffset, 4)
#define TrackedPose_CALLBACK pb_default_field_callback
#define TrackedPose_DEFAULT (const uint8_t*)"\x1d\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00"

#define VRController_FIELDLIST(X, a) \
X(a, STATIC, OPTIONAL, INT32, ControllerId, 1) \
X(a, STATIC, OPTIONAL, INT32, Status, 2) \
X(a, CALLBACK, REPEATED, FLOAT, OrientationMatrix, 3) \
X(a, STATIC, OPTIONAL, MESSAGE, ButtonState, 4) \
X(a, CALLBACK, REPEATED, DOUBLE, Acceleration, 5) \
X(a, CALLBACK, REPEATED, DOUBLE, Velocity, 6) \
X(a, STATIC, OPTIONAL, UENUM, HeadRelation, 7) \
X(a, STATIC, OPTIONAL, UENUM, SuggestedHand, 8) \
X(a, STATIC, OPTIONAL, DOUBLE, Timestamp, 9) \
X(a, CALLBACK, OPTIONAL, STRING, Name, 11) \
X(a, CALLBACK, REPEATED, FLOAT, Position, 12) \
X(a, CALLBACK, REPEATED, FLOAT, Orientation, 13)
#define VRController_CALLBACK pb_default_field_callback
#define VRController_DEFAULT (const uint8_t*)"\x08\x00\x10\x00\x38\x00\x40\x00\x49\x00\x00\x00\x00\x00\x00\x00\x00\x00"
#define VRController_ButtonState_MSGTYPE VRControllerState_t

#define VRControllerAxis_t_FIELDLIST(X, a) \
X(a, STATIC, OPTIONAL, FLOAT, x, 1) \
X(a, STATIC, OPTIONAL, FLOAT, y, 2)
#define VRControllerAxis_t_CALLBACK NULL
#define VRControllerAxis_t_DEFAULT (const uint8_t*)"\x0d\x00\x00\x00\x00\x15\x00\x00\x00\x00\x00"

#define VRControllerState_t_FIELDLIST(X, a) \
X(a, STATIC, OPTIONAL, UINT32, unPacketNum, 1) \
X(a, STATIC, OPTIONAL, UINT64, ulButtonPressed, 2) \
X(a, STATIC, OPTIONAL, UINT64, ulButtonTouched, 3) \
X(a, STATIC, OPTIONAL, MESSAGE, rAxis0, 4) \
X(a, STATIC, OPTIONAL, MESSAGE, rAxis1, 5) \
X(a, STATIC, OPTIONAL, MESSAGE, rAxis2, 7) \
X(a, STATIC, OPTIONAL, MESSAGE, rAxis3, 8) \
X(a, STATIC, OPTIONAL, MESSAGE, rAxis4, 9)
#define VRControllerState_t_CALLBACK NULL
#define VRControllerState_t_DEFAULT (const uint8_t*)"\x08\x00\x10\x00\x18\x00\x00"
#define VRControllerState_t_rAxis0_MSGTYPE VRControllerAxis_t
#define VRControllerState_t_rAxis1_MSGTYPE VRControllerAxis_t
#define VRControllerState_t_rAxis2_MSGTYPE VRControllerAxis_t
#define VRControllerState_t_rAxis3_MSGTYPE VRControllerAxis_t
#define VRControllerState_t_rAxis4_MSGTYPE VRControllerAxis_t

extern const pb_msgdesc_t Beacon_msg;
extern const pb_msgdesc_t ControllerStateRequest_msg;
extern const pb_msgdesc_t ControllerStateResponse_msg;
extern const pb_msgdesc_t HapticPulse_msg;
extern const pb_msgdesc_t HeadTrackingRequest_msg;
extern const pb_msgdesc_t HeadTrackingResponse_msg;
extern const pb_msgdesc_t TrackedPose_msg;
extern const pb_msgdesc_t VRController_msg;
extern const pb_msgdesc_t VRControllerAxis_t_msg;
extern const pb_msgdesc_t VRControllerState_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Beacon_fields &Beacon_msg
#define ControllerStateRequest_fields &ControllerStateRequest_msg
#define ControllerStateResponse_fields &ControllerStateResponse_msg
#define HapticPulse_fields &HapticPulse_msg
#define HeadTrackingRequest_fields &HeadTrackingRequest_msg
#define HeadTrackingResponse_fields &HeadTrackingResponse_msg
#define TrackedPose_fields &TrackedPose_msg
#define VRController_fields &VRController_msg
#define VRControllerAxis_t_fields &VRControllerAxis_t_msg
#define VRControllerState_t_fields &VRControllerState_t_msg

/* Maximum encoded size of messages (where known) */
/* Beacon_size depends on runtime parameters */
/* ControllerStateRequest_size depends on runtime parameters */
#define ControllerStateResponse_size 17
#define HapticPulse_size 23
/* HeadTrackingRequest_size depends on runtime parameters */
/* HeadTrackingResponse_size depends on runtime parameters */
/* TrackedPose_size depends on runtime parameters */
/* VRController_size depends on runtime parameters */
#define VRControllerAxis_t_size 10
#define VRControllerState_t_size 88

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
